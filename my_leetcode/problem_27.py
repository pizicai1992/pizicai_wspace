# -*- coding: utf-8 -*-
# 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

# 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

# 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

# 示例 1:
# 给定 nums = [3,2,2,3], val = 3,
# 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。

# 思路：
# 1. 使用快慢双指针，快指针循环遍历，满指针跟随快指针
# 2. 如果遇到了目标值，则此时慢指针原地不动，快指针继续往前遍历
# 3. 如果遇到的不是目标值，则此时将快指针指向的值赋值给慢指针指向的值，然后两个指针继续往前移动

def solution(nums, val):
    fast, slow = 0, 0   # 初始化快慢指针
    while fast < len(nums):
        if nums[fast] != val:
            nums[slow] = nums[fast] # 如果不是目标值，就把快指针的值赋给慢指针
            fast += 1  # 两个指针继续往前
            slow += 1
        else:
            fast += 1  # 遇到目标值 慢指针停留，快指针继续往前
    return slow, nums[:slow] # 最后慢指针的下标就是 去除目标值后的数组大小

nums = [0,1,2,2,3,0,4,2]
val = 2
print (solution(nums, val))        